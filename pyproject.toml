[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.isort]
profile = "black"

[tool.poetry]
name = "keras-matmulless"
version = "0.0.0"
description = "Keras layers without using matrix multiplications."
license = "Apache-2.0"
authors = ["PhotonicGluon <25820201+PhotonicGluon@users.noreply.github.com>"]
readme = "README.md"
keywords = []
classifiers = []
packages = [{ include = "keras_mml" }]

[[tool.poetry.source]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
priority = "explicit"

[tool.poetry.dependencies]
python = "^3.9"

# Main dependencies
keras = "~3.3.3"
numpy = "~1.26.4"
einops = "~0.8.0"

# Others
poetry-dynamic-versioning = { extras = ["plugin"], version = "~1.4.0" }
numba = "~0.60.0"

[tool.poetry.group.dev.dependencies]
# Tests
pytest = "~8.2.2"
pytest-cov = "~5.0.0"
pytest-xdist = "~3.6.1"

# Docs
myst-parser = "~3.0.1"
sphinx = "~7.3.7"
furo = "2024.5.6"
sphinx-copybutton = "~0.5.2"
sphinx-design = "~0.6.0"
sphinx-autodoc-typehints = "~2.1.1"
sphinx-autobuild = "2024.4.16"
myst-nb = "~1.1.0"

[tool.poetry.group.nvidia-gpu]
optional = true

[tool.poetry.group.nvidia-gpu.dependencies]
nvidia-cublas-cu12 = "~12.3.4.1"
nvidia-cuda-cupti-cu12 = "~12.3.101"
nvidia-cuda-nvcc-cu12 = "~12.3.107"
nvidia-cuda-nvrtc-cu12 = "~12.3.107"
nvidia-cuda-runtime-cu12 = "~12.3.101"
nvidia-cudnn-cu12 = "~8.9.7.29"
nvidia-cufft-cu12 = "~11.0.12.1"
nvidia-curand-cu12 = "~10.3.4.107"
nvidia-cusolver-cu12 = "~11.5.4.101"
nvidia-cusparse-cu12 = "~12.2.0.103"
nvidia-nccl-cu12 = "~2.19.3"
nvidia-nvjitlink-cu12 = "~12.3.101"

[tool.poetry.group.tensorflow]
optional = true

[tool.poetry.group.tensorflow.dependencies]
tensorflow = "~2.16.1"

[tool.poetry.group.tensorflow-gpu]
optional = true

[tool.poetry.group.tensorflow-gpu.dependencies]
tensorflow = { version = "~2.16.1", extras = ["and-cuda"] }

[tool.poetry.group.torch]
optional = true

[tool.poetry.group.torch.dependencies]
torch = { version = "~2.3.1+cpu", source = "pytorch-cpu" }
torchvision = { version = "~0.18.1+cpu", source = "pytorch-cpu" }
torchaudio = { version = "~2.3.1+cpu", source = "pytorch-cpu" }

[tool.poetry.group.torch-gpu]
optional = true

[tool.poetry.group.torch-gpu.dependencies]
torch = "~2.3.1+cpu"
torchvision = "~0.18.1+cpu"
torchaudio = "~2.3.1+cpu"

[tool.poetry.group.jax]
optional = true

[tool.poetry.group.jax.dependencies]
jax = { version = "<0.4.29", extras = ["cpu"] }

[tool.poetry.group.jax-gpu]
optional = true

[tool.poetry.group.jax-gpu.dependencies]
jax = { version = "<0.4.29", extras = ["cuda12"] }

[tool.poetry.group.notebook]
optional = true

[tool.poetry.group.notebook.dependencies]
jupyter = "^1.0.0"
notebook = "~7.2.1"
pandas = "~2.2.2"
seaborn = "~0.13.2"
matplotlib = "~3.9.0"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "pep440"
format-jinja-imports = [{ module = "datetime", item = "datetime" }]
format-jinja = """
    {%- if distance == 0 -%}
        {{ serialize_pep440(base, stage, revision) }}
    {%- elif revision is not none -%}
        {{ serialize_pep440(base, stage, revision + 1, dev=distance) }}
    {%- elif "POETRY_IS_NIGHTLY_BUILD" in env and env["POETRY_IS_NIGHTLY_BUILD"] == "true" -%}
        {{ serialize_pep440(bump_version(base), dev=datetime.now().strftime("%Y%m%d%H")) }}
    {%- else -%}
        {{ serialize_pep440(bump_version(base), stage, revision, dev=distance, metadata=[commit]) }}
    {%- endif -%}
"""
fix-shallow-repository = true
